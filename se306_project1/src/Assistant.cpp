#include "ros/ros.h"
#include "std_msgs/String.h"
#include <geometry_msgs/Twist.h>
#include <nav_msgs/Odometry.h>
#include <sensor_msgs/LaserScan.h>
#include <stdlib.h>
#include "se306_project1/ResidentMsg.h"
#include "se306_project1/AssistantMsg.h"
#include <sstream>
#include "math.h"
#include "time_conversion.hpp"
#include "Assistant.h"

using namespace std;


/**
*	@brief Periodic callback for the provision of medication.
*	Called by the ros::Timer in the run() function. Can specify start time, end time, and period.
*	@note The callback is called at the end of the duration specified for the timer.
*	@param TimerEvent& TimerEvent generated by a ros::Timer.
*	@returns true if behaviour was successful, false otherwise
*/
void Assistant::medicate(const ros::TimerEvent&) {
}

/**
*	@brief Causes assistant to cook for resident and return to them with the food, feeding them.
*	@returns true if behaviour was successful, false otherwise
*/
void Assistant::cook() {
/*
	if (!atKitchen && !finishedCooking) {

		/*move(kitchenCheckpoint);
		if (px == kitchenCheckpoint.first && py == kitchenCheckpoint.second) {
			atKitchen = true;
			pair<double, double> p1 = make_pair(4,-24);
			pair<double, double> p2 = make_pair(24,-24);
			pair<double, double> p3 = make_pair(24,-32);
			pair<double, double> p4 = make_pair(20,-32);
			pair<double, double> p5 = make_pair(20,-28);
			pair<double, double> p6 = make_pair(4,-24);

			shortestPath.clear();
			shortestPath.push_back(p1);
			shortestPath.push_back(p2);
			shortestPath.push_back(p3);
			shortestPath.push_back(p4);
			shortestPath.push_back(p5);
			shortestPath.push_back(p6);
			isMoving = true;
		}


	} else if (atKitchen && !finishedCooking) {

		// The path to simulate the cooking behaviour in the kitchen
		if (px == 4 && py == -24) { // final kitchen points (refer to point 6)
			finishedCooking = true;
		}

	} else if (atKitchen && finishedCooking) {
		//move(home);
		/*if (px == home.first && px == home.second) {
			atKitchen = false;
			finishedCooking = false;
		}
	}
	*/
}


/**
*	@brief Causes assistant to clean the house.
*	@returns true if behaviour was successful, false otherwise
*/
void Assistant::clean() {
}	

/**
*	@brief Causes assistant to entertain the resident.
*	@returns true if behaviour was successful, false otherwise
*/
void Assistant::entertain() {
}


/*	@brief Callback function that unpacks and processes resident status messages.
* 	Calls other callback (do) functions.
*	Assistant should subscribe to the ResidentMsg topic in order for this callback to be called. ResidentMsg is published by the Resident.
*	@param msg A custom ResidentMsg message that contains information about the resident's current status.
*/
void Assistant::delegate(se306_project1::ResidentMsg msg) {
	// Resident status will be a string - one among SILL, ILL, HUNGRY, TIRED BORED, and HEALTHCARE - see Mustafa's pq.
	// alternatively we could send the status in another format.

	// check msg if cook do cooking e.t.c
	if (msg.state == "hungry") {
		cook();
	}

	if (msg.state == "bored") {
		entertain();
	}

	if (msg.state == "") {
		cook();

	}

}



/**
*	@brief Main function for the Assistant process.
*	Controls node setup and periodic events.
*/
int Assistant::run(int argc, char **argv)
{

	//pair<double, double> c1 = make_pair(30,10);
	//pair<double, double> c2 = make_pair(40,10);

	//shortestPath.push_back(c1);
	//shortestPath.push_back(c2);
		
	//You must call ros::init() first of all. ros::init() function needs to see argc and argv. The third argument is the name of the node
	ros::init(argc, argv, "Assistant");

	//NodeHandle is the main access point to communicate with ros.
	ros::NodeHandle n;

	ros::Rate loop_rate(10);


	/* -- Publish / Subscribe -- */

	//advertise() function will tell ROS that you want to publish on a given topic_
	//to stage
	ros::Publisher RobotNode_stage_pub = n.advertise<geometry_msgs::Twist>("robot_1/cmd_vel",1000);

	//subscribe to listen to messages coming from stage
	ros::Subscriber StageOdo_sub = n.subscribe("robot_1/odom",1000, &Assistant::StageOdom_callback, dynamic_cast<Agent*>(this));

	////messages
	//velocity of this RobotNode
	geometry_msgs::Twist RobotNode_cmdvel;

	while (ros::ok())
	{
		//messages to stage
		RobotNode_cmdvel.linear.x = linear_x;
		RobotNode_cmdvel.angular.z = angular_z;
			
		//publish the message
		RobotNode_stage_pub.publish(RobotNode_cmdvel);
		
		ros::spinOnce();

		loop_rate.sleep();
	}

	return 0;

}

/**
*	@brief Redirects to main function (run()) of the node.
*/
int main(int argc, char *argv[]) {
	Assistant *a = new Assistant();
	a->Assistant::run(argc, argv);
}
